



This is a microservices architecture project without Docker.
This is my mongoDB Connection String : mongodb+srv://tymout:xShiTOyopWJvVYWn@tymout.2ovsdf2.mongodb.net/

Microservices & Backend
Architecture:
• Microservices: Each service (User, Event, Discovery, Request, Notification, Feedback, Safety, Payment, Partnership) is built as an independent unit, allowing for modular development and scalability.
• Inter-Service Communication: Uses RESTful APIs for synchronous calls and message queues (like RabbitMQ or Kafka) for asynchronous tasks.

Languages & Frameworks:
• Node.js with Express: Utilized for I/O-intensive services such as Notification and Request handling.
• Python with Flask/Django: Employed for computation-heavy services like Discovery and Feedback.

API Gateway:
• A centralized entry point (potentially using Express or Nginx) that routes incoming requests to the appropriate microservices.

Frontend & Mobile-First UI
Framework:
• A modern JavaScript framework such as React, Vue.js is used to build a responsive, single-page application (SPA).

Design & User Experience:
• Mobile-First Approach: The UI is optimized for mobile devices with responsive design (using Tailwind CSS or Bootstrap) and Progressive Web App (PWA) capabilities (like offline mode and push notifications) to bridge the web and future mobile app experience.

CSS Usage Rules:
• Always use the global CSS files (variables.css, components.css, utilities.css, theme.css) for styling components.
• Never create inline styles or component-specific CSS files with hardcoded values.
• All styling should reference variables from variables.css to maintain consistency.
• Use utility classes from utilities.css for layout and minor styling adjustments.
• Component styling should extend the base styles defined in components.css.
• Any new component patterns should be added to the global CSS files rather than created as one-off styles.

Caching:
• Tools like Redis or Memcached may be implemented to improve performance for frequently accessed data.

Security & Authentication
User Verification & Role Management:
• JWT/OAuth 2.0: For secure authentication, along with role-based access control (users, hosts, admins).
• External Verification: Integration with external identity services (e.g., Aadhaar in India) to validate user credentials.

Data Protection:
• Encryption for data both in transit (via HTTPS) and at rest (using database encryption techniques).


Microservice	MongoDB Use Case
User Service=	Store user profiles, login info, and preferences in user collections.

Event Service=	Use a collection for events, with nested fields for location, time, etc.

Discovery=	Use geospatial indexing + Atlas Search for filters and keyword search.

Feedback=	Continue with flexible reviews and rating storage.

Request Service=	Manage event join requests and approval statuses with status fields.

Notification=	Store messages/logs or use MongoDB change streams to trigger push updates.

Payment= 	Store transaction logs and payment metadata (not actual sensitive card data).

Partnerships=	Save partner data, venues, and revenue details in collections.

Make sure the color code and look and feel of the UI remains consistent throughout the application.
